package ebcdic

import (
	"errors"
	"github.com/stretchr/testify/assert"
	"testing"
)

type testDef struct {
	codePage CodePage
	err      error

	unicodeData        string
	expectedEbcdicData []byte // unicodeData to expectedEbcdicData

	ebcdicData          []byte
	expectedUnicodeData string // ebcdicData to expectedUnicodeData
}

var tests = []testDef{
	{
		codePage: 0,
		err:      errors.New("code page not supported"),
	},
	{
		codePage:            CodePage037,
		unicodeData:         "",
		expectedEbcdicData:  []byte{},
		ebcdicData:          []byte{},
		expectedUnicodeData: "",
	},
	{
		codePage:    CodePage037,
		unicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC",
		expectedEbcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x5A, 0x7C, 0x7B, 0x5B, 0x6C, 0xB0, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0xBA, 0xBB, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0x4F,
			0x54, 0xB5, 0xEC, 0x00, 0x00,
		},
		ebcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x5A, 0x7C, 0x7B, 0x5B, 0x6C, 0xB0, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0xBA, 0xBB, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0x4F,
			0x54, 0xB5, 0xEC, 0x00, 0x00,
		},
		expectedUnicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö\u0000\u0000",
	},
	{
		codePage:            CodePage1140,
		unicodeData:         "",
		expectedEbcdicData:  []byte{},
		ebcdicData:          []byte{},
		expectedUnicodeData: "",
	},
	{
		codePage:    CodePage1140,
		unicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC",
		expectedEbcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x5A, 0x7C, 0x7B, 0x5B, 0x6C, 0xB0, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0xBA, 0xBB, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0x4F,
			0x54, 0xB5, 0xEC, 0x9F, 0x9F,
		},
		ebcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x5A, 0x7C, 0x7B, 0x5B, 0x6C, 0xB0, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0xBA, 0xBB, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0x4F,
			0x54, 0xB5, 0xEC, 0x9F, 0x9F,
		},
		expectedUnicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC",
	},
	{
		codePage:            CodePage273,
		unicodeData:         "",
		expectedEbcdicData:  []byte{},
		ebcdicData:          []byte{},
		expectedUnicodeData: "",
	},
	{
		codePage:    CodePage273,
		unicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC",
		expectedEbcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0xB5, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0x43, 0xDC, 0x63, 0xFC, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0x7C, 0xE0, 0x00, 0x00,
		},
		ebcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0xB5, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0x43, 0xDC, 0x63, 0xFC, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0x7C, 0xE0, 0x00, 0x00,
		},
		expectedUnicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö\u0000\u0000",
	},
	{
		codePage:            CodePage1141,
		unicodeData:         "",
		expectedEbcdicData:  []byte{},
		ebcdicData:          []byte{},
		expectedUnicodeData: "",
	},
	{
		codePage:    CodePage1141,
		unicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC",
		expectedEbcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0xB5, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0x43, 0xDC, 0x63, 0xFC, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0x7C, 0xE0, 0x9F, 0x9F,
		},
		ebcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0xB5, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0x43, 0xDC, 0x63, 0xFC, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0x7C, 0xE0, 0x9F, 0x9F,
		},
		expectedUnicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC",
	},
	{
		codePage:            CodePage500,
		unicodeData:         "",
		expectedEbcdicData:  []byte{},
		ebcdicData:          []byte{},
		expectedUnicodeData: "",
	},
	{
		codePage:    CodePage500,
		unicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC \u00E6",
		expectedEbcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0x7C, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0x4A, 0x5A, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0xB5, 0xEC, 0x00, 0x00, 0x40, 0x9C,
		},
		ebcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0x7C, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0x4A, 0x5A, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0xB5, 0xEC, 0x00, 0x00, 0x40, 0x9C,
		},
		expectedUnicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö\u0000\u0000 \u00E6",
	},
	{
		codePage:            CodePage1148,
		unicodeData:         "",
		expectedEbcdicData:  []byte{},
		ebcdicData:          []byte{},
		expectedUnicodeData: "",
	},
	{
		codePage:    CodePage1148,
		unicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC \u00E6",
		expectedEbcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0x7C, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0x4A, 0x5A, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0xB5, 0xEC, 0x9F, 0x9F, 0x40, 0x9C,
		},
		ebcdicData: []byte{
			0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
			0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x40, 0x81, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0xA2, 0xA3,
			0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x40, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF6, 0xF7, 0xF8,
			0xF9, 0xF0, 0x40, 0x4F, 0x7C, 0x7B, 0x5B, 0x6C, 0x5F, 0x50, 0x5C, 0x4D, 0x5D, 0x60, 0x6D, 0x4E,
			0x7E, 0xC0, 0xD0, 0x4A, 0x5A, 0x5E, 0x7A, 0x7D, 0x7F, 0x4C, 0x6E, 0x6B, 0x4B, 0x61, 0x6F, 0xBB,
			0x54, 0xB5, 0xEC, 0x9F, 0x9F, 0x40, 0x9C,
		},
		expectedUnicodeData: "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefgghijklmnopqrstuvwxyz 12345667890 !@#$%^&*()-_+={}[];:'\"<>,./?|è§Ö€\u20AC \u00E6",
	},
}

func TestToUnicode(t *testing.T) {
	for _, theTest := range tests {
		unicodeDataOut, err := ToUnicode(theTest.ebcdicData, theTest.codePage)

		assert.Equalf(t, theTest.err, err, "CodePage: %d", theTest.codePage)
		assert.Equalf(t, theTest.expectedUnicodeData, string(unicodeDataOut), "CodePage: %d", theTest.codePage)
	}
}

func TestFromUnicode(t *testing.T) {
	for _, theTest := range tests {
		ebcdicDataOut, err := FromUnicode([]rune(theTest.unicodeData), theTest.codePage)

		assert.Equalf(t, theTest.err, err, "CodePage: %d", theTest.codePage)
		assert.Equalf(t, theTest.expectedEbcdicData, ebcdicDataOut, "CodePage: %d", theTest.codePage)
	}
}

func TestRoundTrips1(t *testing.T) {
	for _, theTest := range tests {
		ebcdicData, _ := FromUnicode([]rune(theTest.unicodeData), theTest.codePage)
		unicodeData, _ := ToUnicode(ebcdicData, theTest.codePage)

		assert.Equalf(t, theTest.expectedUnicodeData, string(unicodeData), "CodePage: %d", theTest.codePage)

		unicodeData, _ = ToUnicode(theTest.ebcdicData, theTest.codePage)
		ebcdicData, _ = FromUnicode(unicodeData, theTest.codePage)

		assert.Equalf(t, theTest.expectedEbcdicData, ebcdicData, "CodePage: %d", theTest.codePage)
	}
}

func TestRoundTrips2(t *testing.T) {
	for codePage, codeTable := range CodeTables() {
		assert.Equalf(t, true, roundTrip(codeTable), "CodePage: %d", codePage)
	}
}

func roundTrip(codeTable CodeTable) bool {
	for i, v := range codeTable.ToUnicode {
		if byte(i) != codeTable.FromUnicode[v] {
			return false
		}
	}

	for i, v := range codeTable.FromUnicode {
		if rune(i) != codeTable.ToUnicode[v] {
			return false
		}
	}

	return true
}
